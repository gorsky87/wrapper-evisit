<?php
/**
 * @file
 * Provides an hms_field functionality.
 */

/**
 * Implements hook_element_info().
 */
function hms_field_element_info() {
  return array(
    'hms' => array(
      '#input' => TRUE,
      '#size' => 8,
      '#maxlength' => 16,
      '#default_value' => NULL,
      '#autocomplete_route_name' => FALSE,
      '#process' => array('form_process_autocomplete', 'ajax_process_form', 'form_process_pattern', 'form_process_group'),
      '#theme' => 'input__textfield',
      '#theme_wrappers' => array('form_element'),
      '#pre_render' => array('_hms_pre_render_form_element', 'form_pre_render_textfield', 'form_pre_render_group'),
      '#value_callback' => '_hms_value_callback',
      '#format' => 'h:mm:ss',
      '#element_validate' => array('_hms_validate_form_element'),
    ),
  );
}

/**
 * Implements hook_field_is_empty().

function hms_field_field_is_empty($item, $field) {
  if ($item['value'] === '') {
      return TRUE;
  }
  return FALSE;
}
 */


/**
 * Implements hook_theme().
 */
function hms_field_theme($existing, $type, $theme, $path) {
  return array(
    'hms' => array(
      'variables' => array('value' => 0, 'format' => 'h:mm', 'leading_zero' => TRUE, 'running_since' => 0, 'offset' => 0, 'default_value' => 0),
    ),
    'hms_natural_language' => array(
      'variables' => array('value' => 0, 'format' => 'w:d:h:m:s', 'separator' => ', ', 'last_separator' => ' and '),
    ),
  );
}

/**
 * Theme HMS
 */
function theme_hms($variables) {
  $classes = array('hms', str_replace(':', '-', 'hms-format-' . $variables['format']));

  $value = $variables['value'];
  $offset = $variables['offset'];
  $default_value = $variables['default_value'];
  if ($variables['running_since'] !== 0) {
    if (!$offset && !$default_value && $value) {
      // Backwards compatible.
      $offset = $value;
      $default_value = $value;
      $value = 0;
    }
    $value = $default_value;
    // It is not possible to run longer then from 1970-01-01 00:00:01
    $classes[] = 'hms-running';
    // We also need to pass the running since value to JS.
    // When format h is presented, the underlaying value can be at 3599
    // The next second h needs to update.
    // Be sure to pass running_since as time() (== GMT time)
    if ($variables['running_since'] < 0) {
      $variables['running_since'] = REQUEST_TIME;
    }
    $classes[] = 'hms-since-' . $variables['running_since'];
    $classes[] = 'hms-offset-' . $offset;
    $classes[] = 'hms-leading_zero-' . $variables['leading_zero'];
    if ($offset) {
      $value = (REQUEST_TIME - $variables['running_since']) + $offset;
    }
  }
  $html = '<span class="' . implode(' ' , $classes) . '">';
  $html .= _hms_seconds_to_formatted($value, $variables['format'], $variables['leading_zero']);
  $html .= '</span>';
  return $html;
}

/**
 * Preprocess theme hms.
 *
 * Attach JS when needed.
 */
function template_preprocess_hms(&$variables) {
  if ($variables['running_since'] !== 0) {
    _hms_add_running_js();
  }
}
/**
 * Theme hms_natural_language
 *
 * TODO: Investigate running since options (see theme_hms)
 *   Would be cool if we can also make this format a 'Forrest Gump' format.
 */
function theme_hms_natural_language($variables) {
  $labels = _hms_factor_map(TRUE);

  // Assign keyed values array.
  $values = array_combine(
    explode(':', $variables['format']),
    explode(':', _hms_seconds_to_formatted($variables['value'], $variables['format'], TRUE))
  );

  // Spit out HTML per value (only when value > 0).
  $html = array();
  foreach ($values as $key => $val) {
    if ($val != 0) {
      $html[] = '<span class="' . drupal_clean_css_identifier($labels[$key]['label multiple']) . '">' . format_plural($val, '@count ' . $labels[$key]['label single'], '@count ' . $labels[$key]['label multiple']) . '</span>';
    }
  }

  // Serial commas - and
  $and = $comma = t($variables['separator']);
  if (isset($variables['last_separator']) && strlen($variables['last_separator'])) {
    $and = t($variables['last_separator']);
  }

  switch (count($html)) {
    case 0:
    case 1:
      return reset($html);
    default:
      $last = array_pop($html);
      return implode($comma, $html) . $and . $last;
  }
}

/**
 * Helpers.
 */

/**
 * HMS form element validator.
 */
function _hms_validate_form_element(&$element, &$form_state) {
  $form_input = _hms_array_get_nested_value($form_state['input'], $element['#array_parents']);
  if (_hms_formatted_to_seconds($form_input, $element['#format']) === FALSE) {
    form_error($element, $form_state, t('@title field cannot be parsed. Please use format \'%format\'.', array('@title' => $element['#title'], '%format' => $element['#format'])));
  }
}

function _hms_array_get_nested_value(array &$array, array $parents, &$key_exists = NULL) {
  $ref = &$array;
  foreach ($parents as $parent) {
    if (is_array($ref) && array_key_exists($parent, $ref)) {
      $ref = &$ref[$parent];
    }
    else {
      $key_exists = FALSE;
      $null = NULL;
      return $null;
    }
  }
  $key_exists = TRUE;
  return $ref;
}

/**
* Returns possible format options.
*/
function _hms_format_options() {
  $format = drupal_static(__FUNCTION__);
  if (empty($format)) {
    $format = array('h:mm' => 'h:mm', 'h:mm:ss' => 'h:mm:ss', 'm:ss' => 'm:ss', 'h' => 'h', 'm' => 'm', 's' => 's');
    drupal_alter('hms_format', $format);
  }
  return $format;
}

/**
 * Returns the factor map of the format options.
 *
 * Note: We cannot go further then weeks in this setup.
 *       A month implies that we know how many seconds a month is.
 *       Problem here is that a month can be 28(29), 30 or 31 days.
 *       Same goes for C (century) Y (year) Q (quarter).
 *       Only solution is that we have a value relative to a date.
 *
 *  Use HOOK_hms_factor_alter($factors) to do your own magic.
 */
function _hms_factor_map($return_full = FALSE) {
  $factor = drupal_static(__FUNCTION__);
  if (empty($factor)) {
    $factor = array(
      'w' => array('factor value' => 604800, 'label single' => 'week', 'label multiple' => 'weeks'),
      'd' => array('factor value' => 86400, 'label single' => 'day', 'label multiple' => 'days'),
      'h' => array('factor value' => 3600, 'label single' => 'hour', 'label multiple' => 'hours'),
      'm' => array('factor value' => 60, 'label single' => 'minute', 'label multiple' => 'minutes'),
      's' => array('factor value' => 1, 'label single' => 'second', 'label multiple' => 'seconds'),
    );
    drupal_alter('hms_factor', $factor);
  }
  if ($return_full) {
    return $factor;
  }

  // We only return the factor value here.
  // for historical reasons we also check if value is an array.
  $return = array();
  foreach ($factor as $key => $val) {
    $value = (is_array($val) ? $val['factor value'] : $val);
    $return[$key] = $value;
  }
  return $return;
}

/**
 * Returns number of seconds from a formatted string.
 *
 * NULL is empty value
 * 0 is 0
 * FALSE is error.
 */
function _hms_formatted_to_seconds($str, $format='h:m:s') {

  if (!strlen($str)) {
    return NULL;
  }

  if ($str == '0') {
    return 0;
  }

  $value = 0;

  // is the value negative?
  $negative = FALSE;
  if (substr($str, 0, 1) == '-') {
    $negative = TRUE;
    $str = substr($str, 1);
  }

  $factor_map = _hms_factor_map();
  $search = _hms_normalize_format($format);
  for ($i=0;$i<strlen($search);$i++) {
    // Is this char in the factor map?
    if (isset($factor_map[$search[$i]])) {
      $factor = $factor_map[$search[$i]];
      // What is the next seperator to search for?
      $bumper = '$';
      if (isset($search[$i+1])) {
        $bumper = '(' . preg_quote($search[$i+1], '/') . '|$)';
      }
      if(preg_match_all('/^(.*)' . $bumper . '/U', $str, $matches)) {
        // Replace , with .
        $num = str_replace(',', '.', $matches[1][0]);
        // Return error when found string is not numeric
        if (!is_numeric($num)) {
          return FALSE;
        }
        // Shorten $str
        $str = substr($str, strlen($matches[1][0]));
        // Calculate value
        $value += ($num * $factor);
      }

    } elseif (substr($str, 0, 1) == $search[$i]) {
      // Expected this value, cut off and go ahead.
      $str = substr($str, 1);
    } else {
      // Does not follow format.
      return FALSE;
    }
    if (!strlen($str)) {
      // No more $str to investigate.
      break;
    }
  }

  if ($negative) {
    $value = 0 - $value;
  }

  return $value;
}

/**
 * Returns a formatted string form the number of seconds.
 */
function _hms_seconds_to_formatted($seconds, $format='h:mm', $leading_zero = TRUE) {

  // Return NULL on empty string.
  if ($seconds === '') {
    return NULL;
  }

  $factor = _hms_factor_map();
  // We need factors, biggest first.
  arsort($factor, SORT_NUMERIC);
  $values = array();
  $left_over = $seconds;
  $str = '';
  if ($seconds < 0) {
    $str .= '-';
    $left_over = abs($left_over);
  }
  foreach ($factor as $key => $val) {
    if (strpos($format, $key) === FALSE) {
      continue; // Not in our format, please go on, so we can plus this on a value in our format.
    }
    if ($left_over == 0) {
      $values[$key] = 0;
      continue;
    }
    $values[$key] = floor($left_over/$factor[$key]);
    $left_over -= ($values[$key] * $factor[$key]);
  }

  $format = explode(':', $format);

  foreach($format as $key) {
    if (!$leading_zero && (empty($values[substr($key, 0, 1)]) || !$values[substr($key, 0, 1)])) {
      continue;
    }
    $leading_zero = TRUE;
    $str .= sprintf('%0'.strlen($key).'d', $values[substr($key, 0, 1)]) . ':';
  }
  if (!strlen($str)) {
    $key = array_pop($format);
    $str = sprintf('%0'.strlen($key).'d', 0) . ':';
  }
  return substr($str, 0, -1);
}

/**
 * Helper to normalize format.
 *
 * Changes double keys to single keys.
 */
function _hms_normalize_format($format) {
  $keys = array_keys(_hms_factor_map());
  $search_keys = array_map('_add_multi_search_tokens', $keys);
  return preg_replace($search_keys, $keys, $format);
}

/**
 * Helper to extend values in search array
 */
function _add_multi_search_tokens($item) {
  return '/' . $item . '+/';
}

/**
 * Helper function to convert input values to seconds (FORM API).
 */
function _hms_value_callback($element, $input = NULL, $form_state) {
  if ($form_state['process_input'] && (!empty($input) || $input === 0)) {
    return _hms_formatted_to_seconds($input, $element['#format']);
  }
  return $input;
}

/**
 * Helper function to convert seconds to a formatted value (FORM API).
 */
function _hms_pre_render_form_element($element) {
  $value = $element['#value']!==FALSE?$element['#value']:$element['#default_value'];
  if ((!empty($value) || (int)$value === 0) && is_numeric($value)) {
    $element['#value'] = _hms_seconds_to_formatted($value, $element['#format']);
  }
  return $element;
}


/**
 * Add js for running HMS fields.
 */
function _hms_add_running_js() {
  $hms_running_js_added = &drupal_static(__FUNCTION__);
  if (!empty($hms_running_js_added)) {
    return;
  }
  $hms_running_js_added = TRUE;
  _drupal_add_js(drupal_get_path('module', 'hms_field') . '/hms_field.js');
  _drupal_add_js(array('hms_field' => array('servertime' => REQUEST_TIME, 'factor_map' => _hms_factor_map())), 'setting');
}
